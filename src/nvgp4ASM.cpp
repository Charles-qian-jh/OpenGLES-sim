#line 2 "nvgp4ASM.cpp"

#line 4 "nvgp4ASM.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define yy_create_buffer nvgp4ASM__create_buffer
#define yy_delete_buffer nvgp4ASM__delete_buffer
#define yy_flex_debug nvgp4ASM__flex_debug
#define yy_init_buffer nvgp4ASM__init_buffer
#define yy_flush_buffer nvgp4ASM__flush_buffer
#define yy_load_buffer_state nvgp4ASM__load_buffer_state
#define yy_switch_to_buffer nvgp4ASM__switch_to_buffer
#define yyin nvgp4ASM_in
#define yyleng nvgp4ASM_leng
#define yylex nvgp4ASM_lex
#define yylineno nvgp4ASM_lineno
#define yyout nvgp4ASM_out
#define yyrestart nvgp4ASM_restart
#define yytext nvgp4ASM_text
#define yywrap nvgp4ASM_wrap
#define yyalloc nvgp4ASM_alloc
#define yyrealloc nvgp4ASM_realloc
#define yyfree nvgp4ASM_free

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE nvgp4ASM_restart(nvgp4ASM_in  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

extern int nvgp4ASM_leng;

extern FILE *nvgp4ASM_in, *nvgp4ASM_out;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    /* Note: We specifically omit the test for yy_rule_can_match_eol because it requires
     *       access to the local variable yy_act. Since yyless() is a macro, it would break
     *       existing scanners that call yyless() from OUTSIDE nvgp4ASM_lex. 
     *       One obvious solution it to make yy_act a global. I tried that, and saw
     *       a 5% performance hit in a non-nvgp4ASM_lineno scanner, because yy_act is
     *       normally declared as a register variable-- so it is not worth it.
     */
    #define  YY_LESS_LINENO(n) \
            do { \
                int yyl;\
                for ( yyl = n; yyl < nvgp4ASM_leng; ++yyl )\
                    if ( nvgp4ASM_text[yyl] == '\n' )\
                        --nvgp4ASM_lineno;\
            }while(0)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up nvgp4ASM_text. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up nvgp4ASM_text again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via nvgp4ASM_restart()), so that the user can continue scanning by
	 * just pointing nvgp4ASM_in at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = 0; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when nvgp4ASM_text is formed. */
static char yy_hold_char;
static int yy_n_chars;		/* number of characters read into yy_ch_buf */
int nvgp4ASM_leng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow nvgp4ASM_wrap()'s to do buffer switches
 * instead of setting up a fresh nvgp4ASM_in.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void nvgp4ASM_restart (FILE *input_file  );
void nvgp4ASM__switch_to_buffer (YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE nvgp4ASM__create_buffer (FILE *file,int size  );
void nvgp4ASM__delete_buffer (YY_BUFFER_STATE b  );
void nvgp4ASM__flush_buffer (YY_BUFFER_STATE b  );
void nvgp4ASM_push_buffer_state (YY_BUFFER_STATE new_buffer  );
void nvgp4ASM_pop_buffer_state (void );

static void nvgp4ASM_ensure_buffer_stack (void );
static void nvgp4ASM__load_buffer_state (void );
static void nvgp4ASM__init_buffer (YY_BUFFER_STATE b,FILE *file  );

#define YY_FLUSH_BUFFER nvgp4ASM__flush_buffer(YY_CURRENT_BUFFER )

YY_BUFFER_STATE nvgp4ASM__scan_buffer (char *base,yy_size_t size  );
YY_BUFFER_STATE nvgp4ASM__scan_string (yyconst char *yy_str  );
YY_BUFFER_STATE nvgp4ASM__scan_bytes (yyconst char *bytes,int len  );

void *nvgp4ASM_alloc (yy_size_t  );
void *nvgp4ASM_realloc (void *,yy_size_t  );
void nvgp4ASM_free (void *  );

#define yy_new_buffer nvgp4ASM__create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        nvgp4ASM_ensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            nvgp4ASM__create_buffer(nvgp4ASM_in,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        nvgp4ASM_ensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            nvgp4ASM__create_buffer(nvgp4ASM_in,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define nvgp4ASM_wrap(n) 1
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

FILE *nvgp4ASM_in = (FILE *) 0, *nvgp4ASM_out = (FILE *) 0;

typedef int yy_state_type;

extern int nvgp4ASM_lineno;

int nvgp4ASM_lineno = 1;

extern char *nvgp4ASM_text;
#define yytext_ptr nvgp4ASM_text

static yy_state_type yy_get_previous_state (void );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  );
static int yy_get_next_buffer (void );
static void yy_fatal_error (yyconst char msg[]  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up nvgp4ASM_text.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	nvgp4ASM_leng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 192
#define YY_END_OF_BUFFER 193
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[441] =
    {   0,
      190,  190,  193,  192,  190,  191,  192,  189,  189,  187,
      187,  187,  187,  186,  186,  186,  186,  186,   96,  186,
      186,  186,  186,  186,  186,  186,  186,  186,  186,   98,
      186,   97,  186,  181,  181,  181,  186,  181,  186,  181,
      186,  186,  181,  192,  190,    0,    0,    0,    0,  187,
        0,  108,  109,  110,  186,  163,  186,  186,  186,  186,
      186,  186,  186,   99,  186,  151,  186,  186,  186,  186,
      186,  186,  186,  186,  121,  186,  128,  186,  122,  123,
      182,  107,  186,   91,  124,  186,  186,  186,  125,  186,
      186,  186,  186,  186,  186,  126,  186,  186,  186,  186,

      157,   59,  186,  186,  186,  186,  183,  186,  186,  186,
      186,  186,  186,  186,  186,  186,  169,  186,  186,  186,
      186,  186,  186,  186,  186,  186,  186,  127,  186,  186,
      186,  186,  186,  186,  185,  186,  186,  186,  186,  186,
      186,  186,  184,    0,    7,    0,    1,    0,    0,    0,
        0,  188,  164,  165,   17,   50,   51,  186,  186,  166,
       89,   87,  100,  101,  186,  152,  153,   73,  186,   33,
      186,   46,   71,   52,   53,   54,   55,  186,   15,  129,
      137,   34,  136,  144,   19,   20,  130,  138,  131,  139,
       21,  132,  140,  148,   35,   22,   75,  133,  141,   76,

       56,   57,   49,   23,   58,  145,  154,  134,  142,  160,
       24,   25,  172,  104,  158,  159,  186,  186,  186,  186,
       45,   36,   37,  186,   92,   88,   60,  186,   38,  105,
       77,  102,   39,   61,  170,  171,   62,   63,   64,  186,
       47,   48,   40,   65,   66,   67,  186,   31,   68,   69,
       79,  186,   80,  135,  143,  186,   81,   86,   82,   83,
       84,   85,  106,  186,  186,   78,   72,   70,  185,  186,
      186,  186,  186,  186,  186,  186,  184,    0,    0,    0,
        0,    0,  186,  186,  167,  168,   18,   90,  111,   74,
       93,  186,  186,  149,  150,  146,  147,  155,  156,  161,

      162,  173,  174,  186,  186,   26,  186,   28,  186,  112,
      186,  186,  103,  186,  186,   41,  186,   43,  186,  185,
      186,  186,  186,  186,  186,  186,  186,  186,  184,    0,
        0,    0,    0,    6,    0,    0,  186,  186,   94,  186,
      186,  186,   27,   29,   30,  186,    0,    9,  186,   32,
       42,   44,  186,  186,   14,   13,  186,  186,  186,  186,
        0,    0,    0,    0,    0,  186,  186,  186,   95,  186,
        0,   10,  186,  186,  178,  186,  186,  177,  186,  175,
        0,    0,    0,    0,    0,  116,  117,    0,    8,  186,
        0,   11,  186,  186,  186,  186,  186,  186,  186,  186,

      186,   16,   12,    0,    0,    0,    3,    0,  113,  114,
      186,  186,  186,  176,  179,  186,    0,    4,    0,    0,
        2,  186,  186,  186,  186,    0,    5,  186,  118,  115,
      186,  186,  186,  186,  186,  186,  119,  120,  180,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    4,    5,    1,    6,    7,    1,    1,    1,    7,
        7,    1,    8,    7,    8,    9,    1,   10,   11,   12,
       13,   14,   15,   15,   15,   15,   15,    7,    7,    1,
        1,    1,    1,    1,   16,   17,   18,   19,   20,   21,
       22,   23,   24,   25,   26,   27,   28,   29,   30,   31,
       32,   33,   34,   35,   36,   37,   38,   39,   40,   41,
        7,    1,    7,    1,   42,    1,   43,   44,   45,   46,

       47,   48,   49,   25,   50,   25,   25,   51,   52,   53,
       54,   55,   25,   56,   57,   58,   59,   60,   61,   62,
       61,   61,    7,    7,    7,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[63] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2
    } ;

static yyconst flex_int16_t yy_base[457] =
    {   0,
        0,  635,  639,  641,   61,  641,   60,  641,   56,   63,
       70,   81,   92,   93,   81,  103,  101,  109,  107,   78,
      119,   76,    0,  122,  129,  134,  130,  144,  165,  188,
      151,   87,  161,  138,  158,    0,  582,  176,  583,  186,
      589,  588,   25,  631,  125,  630,  576,  584,  115,  234,
      226,  641,  641,  641,    0,  187,  611,  610,  595,  592,
      606,  599,  597,  178,  599,  217,  591,  127,  604,  583,
      238,  584,  584,  598,  243,  604,  245,  597,  247,  249,
        0,    0,  593,    0,  252,  601,  577,  580,  254,  174,
      581,  197,  582,  579,  586,  256,   95,  578,  584,  586,

      258,    0,  568,  569,  135,  563,  252,  187,  253,  573,
      563,  566,  583,  256,  562,  563,  266,  259,  265,  565,
      260,  573,  267,  559,  574,  549,  257,  289,  284,  575,
      290,  569,  554,  567,  263,  527,  541,  569,  525,  524,
      518,  523,  247,  575,  641,  574,  641,  522,  523,  518,
      234,  316,    0,    0,    0,    0,    0,  557,  539,  303,
        0,    0,    0,    0,  544,    0,    0,    0,  535,    0,
      549,    0,  552,    0,    0,    0,    0,  547,  299,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  307,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,  310,  323,    0,    0,  325,
        0,    0,  327,    0,    0,    0,  535,  549,  274,  305,
        0,    0,    0,  529,    0,    0,    0,  534,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  543,
        0,    0,    0,    0,    0,    0,  526,    0,    0,    0,
        0,  529,    0,    0,    0,  530,    0,    0,    0,    0,
        0,    0,    0,  316,  307,    0,    0,    0,  301,  502,
      508,  294,  506,  496,  496,  495,  285,  300,  509,  548,
      504,  492,  508,  523,    0,    0,    0,    0,    0,    0,
        0,  525,  525,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,  508,  515,    0,  508,    0,  524,    0,
      521,  509,    0,  357,  520,    0,  503,    0,  519,    0,
      485,  482,  478,  477,  473,  479,  470,  481,    0,  477,
      470,  472,  521,  641,  469,  472,  344,  504,    0,  489,
      484,  366,    0,    0,    0,  480,  514,  641,  375,    0,
        0,    0,  472,  468,    0,    0,  464,  455,  456,  449,
      459,  466,  450,  451,  452,  486,  485,  384,    0,  393,
      500,  641,  402,  401,    0,  449,  447,  458,  452,    0,
      451,  445,  446,  492,  441,    0,    0,  490,  641,  419,
      489,  641,  434,  472,  471,  456,  452,  467,  428,  432,

      439,    0,  641,  480,  437,  478,  641,  477,    0,    0,
      446,  461,  459,    0,    0,  422,  472,  641,  471,  430,
      641,  416,  411,  395,  378,  415,  641,  376,    0,    0,
      299,  403,  295,  321,  184,  162,    0,    0,    0,  641,
      107,  443,  445,  447,  449,  451,  453,  455,  457,  459,
      461,  463,  465,  467,  469,  471
    } ;

static yyconst flex_int16_t yy_def[457] =
    {   0,
      440,    1,  440,  440,  440,  440,  440,  440,  440,  440,
      440,  440,  440,  441,  441,  441,  441,  441,  441,  441,
      441,  441,  441,  441,  441,  441,  441,  441,  441,  441,
      441,  441,  441,  441,  441,  441,  441,  441,  441,  441,
      441,  441,  441,  442,  440,  443,  440,  440,  440,  440,
      440,  440,  440,  440,  441,  441,  441,  441,  441,  441,
      441,  441,  441,  441,  441,  441,  441,  441,  441,  441,
      441,  441,  441,  441,  441,  441,  441,  441,  441,  441,
      441,  441,  441,  441,  441,  441,  441,  441,  441,  441,
      441,  441,  441,  441,  441,  441,  441,  441,  441,  441,

      441,  441,  441,  441,  441,  441,   29,  441,  441,  441,
      441,  441,  441,  441,  441,  441,  441,  441,  441,  441,
      441,  441,  441,  441,  441,  441,  441,  441,  441,  441,
      441,  441,  441,  441,  441,  441,  441,  441,  441,  441,
      441,  441,  441,  442,  440,  443,  440,  440,  440,  440,
      440,  440,  441,  441,  441,  441,  441,  441,  441,  441,
      441,  441,  441,  441,  441,  441,  441,  441,  441,  441,
      441,  441,  441,  441,  441,  441,  441,  441,  441,  441,
      441,  441,  441,  441,  441,  441,  441,  441,  441,  441,
      441,  441,  441,  441,  441,  441,  441,  441,  441,  441,

      441,  441,  441,  441,  441,  441,  441,  441,  441,  441,
      441,  441,  441,  441,  441,  441,  441,  441,  441,  441,
      441,  441,  441,  441,  441,  441,  441,  441,  441,  441,
      441,  441,  441,  441,  441,  441,  441,  441,  441,  441,
      441,  441,  441,  441,  441,  441,  441,  441,  441,  441,
      441,  441,  441,  441,  441,  441,  441,  441,  441,  441,
      441,  441,  441,  441,  441,  441,  441,  441,  441,  441,
      441,  441,  441,  441,  441,  441,  441,  440,  440,  444,
      440,  440,  441,  441,  441,  441,  441,  441,  441,  441,
      441,  441,  441,  441,  441,  441,  441,  441,  441,  441,

      441,  441,  441,  441,  441,  441,  441,  441,  441,  441,
      441,  441,  441,  445,  441,  441,  441,  441,  441,  441,
      441,  441,  441,  441,  441,  441,  441,  441,  441,  440,
      440,  440,  444,  440,  440,  440,  441,  441,  441,  441,
      441,  446,  441,  441,  441,  441,  447,  440,  445,  441,
      441,  441,  441,  441,  441,  441,  441,  441,  441,  441,
      440,  440,  440,  440,  440,  441,  441,  448,  441,  449,
      450,  440,  446,  441,  441,  441,  441,  441,  441,  441,
      440,  440,  440,  451,  440,  441,  441,  452,  440,  448,
      453,  440,  449,  441,  441,  441,  441,  441,  441,  441,

      441,  441,  440,  454,  440,  451,  440,  455,  441,  441,
      441,  441,  441,  441,  441,  441,  454,  440,  456,  455,
      440,  441,  441,  441,  441,  456,  440,  441,  441,  441,
      441,  441,  441,  441,  441,  441,  441,  441,  441,    0,
      440,  440,  440,  440,  440,  440,  440,  440,  440,  440,
      440,  440,  440,  440,  440,  440
    } ;

static yyconst flex_int16_t yy_nxt[704] =
    {   0,
        4,    5,    6,    5,    4,    7,    8,    9,    8,   10,
       11,   12,   13,   10,   10,   14,   15,   16,   17,   18,
       19,   20,   21,   22,   23,   23,   24,   25,   26,   27,
       28,   23,   29,   30,   31,   32,   23,   23,   33,   23,
       23,   23,   34,   35,   36,   23,   23,   37,   38,   23,
       23,   23,   23,   23,   39,   40,   23,   41,   23,   42,
       43,   43,   45,   46,   45,   50,   50,   50,   50,   50,
       50,   51,   50,   50,   50,   50,   50,   50,   51,   50,
       50,   50,   50,   50,   50,  143,  143,   83,   52,   51,
       50,   50,   50,   50,   50,   50,   84,   79,  130,   53,

       51,   50,   50,   50,   50,   50,   50,   61,   55,   56,
       54,   57,   80,   62,   47,  210,   48,  131,   63,   49,
       64,   58,   65,   66,   70,   59,   45,   60,   45,  211,
       67,   71,   68,   77,   72,   73,   81,   74,   69,   78,
       75,   85,   82,   86,   90,   87,  219,   76,  220,   94,
      101,   95,   91,   96,   88,  169,   89,  150,   92,  104,
      170,  151,  102,   97,   93,  103,   98,   99,  100,  105,
      127,  439,  132,  106,  107,  107,  107,  107,  107,  107,
      135,  135,  108,  128,  109,  110,  135,  163,  164,  129,
      133,  134,  200,  135,  111,  136,  153,  154,  112,  113,

      135,  135,  438,  114,  222,  115,  135,  116,  117,  118,
      119,  120,  201,  135,  121,  203,  122,  223,  135,  135,
      155,  123,  124,  125,  135,  126,  166,  167,  135,  135,
      138,  135,  140,  204,  135,  152,  152,  152,  152,  152,
      152,  135,   51,   50,   50,   50,   50,   50,   50,  173,
      174,  175,  180,  181,  183,  184,  187,  188,  189,  190,
      176,  192,  193,  198,  199,  208,  209,  215,  216,   55,
      224,   55,   55,  194,  231,  235,  236,  185,  238,  244,
      240,   55,  247,  225,  252,   55,  281,  226,  248,  282,
      232,  241,  237,  239,  245,  253,  306,  242,  254,  255,

      257,  264,  258,  265,  259,  269,  269,  277,  277,  307,
      260,  269,  285,  286,  261,  262,  294,  295,  269,  296,
      297,  308,  292,  318,  256,  152,  152,  152,  152,  152,
      152,  293,  298,  299,  300,  301,  302,  303,  316,  437,
      309,  323,  319,  320,  320,  329,  329,  330,  331,  320,
      436,  317,  433,  324,  366,  367,  320,  347,  347,  348,
      347,  347,  347,  347,  347,  347,  371,  371,  372,  371,
      371,  371,  371,  371,  371,  347,  347,  348,  347,  347,
      347,  347,  347,  347,  388,  388,  389,  388,  388,  388,
      388,  388,  388,  391,  391,  392,  391,  391,  391,  391,

      391,  391,  371,  371,  372,  371,  371,  371,  371,  371,
      371,  394,  395,  434,  435,  432,  396,  427,  397,  388,
      388,  389,  388,  388,  388,  388,  388,  388,  431,  430,
      429,  428,  421,  398,  391,  391,  392,  391,  391,  391,
      391,  391,  391,  144,  144,  146,  146,  333,  333,  349,
      349,  373,  373,  347,  347,  390,  390,  393,  393,  371,
      371,  406,  406,  388,  388,  391,  391,  417,  417,  420,
      420,  426,  426,  427,  418,  425,  424,  423,  422,  421,
      407,  419,  418,  416,  415,  414,  413,  412,  411,  410,
      409,  392,  389,  408,  407,  405,  404,  403,  402,  401,

      400,  399,  372,  387,  386,  385,  384,  383,  382,  381,
      380,  379,  378,  377,  376,  375,  348,  374,  370,  369,
      368,  365,  364,  334,  363,  362,  361,  360,  359,  358,
      357,  356,  355,  354,  353,  352,  351,  350,  346,  345,
      344,  343,  342,  341,  340,  339,  338,  337,  336,  335,
      334,  332,  328,  327,  326,  325,  322,  321,  315,  314,
      313,  312,  311,  310,  305,  304,  291,  290,  289,  288,
      287,  284,  283,  280,  279,  278,  147,  145,  276,  275,
      274,  273,  272,  271,  270,  268,  267,  266,  263,  251,
      250,  249,  246,  243,  234,  233,  230,  229,  228,  227,

      221,  218,  217,  214,  213,  212,  207,  206,  205,  202,
      197,  196,  195,  191,  186,  182,  179,  178,  177,  172,
      171,  168,  165,  162,  161,  160,  159,  158,  157,  156,
      149,  148,  147,  145,  142,  141,  139,  137,  440,   44,
        3,  440,  440,  440,  440,  440,  440,  440,  440,  440,
      440,  440,  440,  440,  440,  440,  440,  440,  440,  440,
      440,  440,  440,  440,  440,  440,  440,  440,  440,  440,
      440,  440,  440,  440,  440,  440,  440,  440,  440,  440,
      440,  440,  440,  440,  440,  440,  440,  440,  440,  440,
      440,  440,  440,  440,  440,  440,  440,  440,  440,  440,

      440,  440,  440
    } ;

static yyconst flex_int16_t yy_chk[704] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    5,    7,    5,    9,    9,    9,    9,    9,
        9,   10,   10,   10,   10,   10,   10,   10,   11,   11,
       11,   11,   11,   11,   11,   43,   43,   22,   11,   12,
       12,   12,   12,   12,   12,   12,   22,   20,   32,   12,

       13,   13,   13,   13,   13,   13,   13,   15,  441,   14,
       13,   14,   20,   15,    7,   97,    7,   32,   16,    7,
       16,   14,   16,   16,   17,   14,   45,   14,   45,   97,
       16,   17,   16,   19,   17,   18,   21,   18,   16,   19,
       18,   24,   21,   24,   25,   24,  105,   18,  105,   26,
       27,   26,   25,   26,   24,   68,   24,   49,   25,   28,
       68,   49,   27,   26,   25,   27,   26,   26,   26,   28,
       31,  436,   33,   28,   29,   29,   29,   29,   29,   29,
       34,   34,   29,   31,   29,   29,   34,   64,   64,   31,
       33,   33,   90,   34,   29,   34,   56,   56,   29,   30,

       35,   35,  435,   30,  108,   30,   35,   30,   30,   30,
       30,   30,   90,   35,   30,   92,   30,  108,   38,   38,
       56,   30,   30,   30,   38,   30,   66,   66,   40,   40,
       38,   38,   40,   92,   40,   51,   51,   51,   51,   51,
       51,   40,   50,   50,   50,   50,   50,   50,   50,   71,
       71,   71,   75,   75,   77,   77,   79,   79,   80,   80,
       71,   85,   85,   89,   89,   96,   96,  101,  101,  107,
      109,  107,  107,   85,  114,  117,  117,   77,  118,  121,
      119,  107,  123,  109,  127,  107,  151,  109,  123,  151,
      114,  119,  117,  118,  121,  127,  219,  119,  128,  128,

      129,  131,  129,  131,  129,  135,  135,  143,  143,  219,
      129,  135,  160,  160,  129,  129,  194,  194,  135,  206,
      206,  220,  179,  265,  128,  152,  152,  152,  152,  152,
      152,  179,  207,  207,  210,  210,  213,  213,  264,  434,
      220,  272,  265,  269,  269,  277,  277,  278,  278,  269,
      433,  264,  431,  272,  337,  337,  269,  314,  314,  314,
      314,  314,  314,  314,  314,  314,  342,  342,  342,  342,
      342,  342,  342,  342,  342,  349,  349,  349,  349,  349,
      349,  349,  349,  349,  368,  368,  368,  368,  368,  368,
      368,  368,  368,  370,  370,  370,  370,  370,  370,  370,

      370,  370,  373,  373,  373,  373,  373,  373,  373,  373,
      373,  374,  374,  432,  432,  428,  374,  426,  374,  390,
      390,  390,  390,  390,  390,  390,  390,  390,  425,  424,
      423,  422,  420,  374,  393,  393,  393,  393,  393,  393,
      393,  393,  393,  442,  442,  443,  443,  444,  444,  445,
      445,  446,  446,  447,  447,  448,  448,  449,  449,  450,
      450,  451,  451,  452,  452,  453,  453,  454,  454,  455,
      455,  456,  456,  419,  417,  416,  413,  412,  411,  408,
      406,  405,  404,  401,  400,  399,  398,  397,  396,  395,
      394,  391,  388,  385,  384,  383,  382,  381,  379,  378,

      377,  376,  371,  367,  366,  365,  364,  363,  362,  361,
      360,  359,  358,  357,  354,  353,  347,  346,  341,  340,
      338,  336,  335,  333,  332,  331,  330,  328,  327,  326,
      325,  324,  323,  322,  321,  319,  317,  315,  312,  311,
      309,  307,  305,  304,  293,  292,  284,  283,  282,  281,
      280,  279,  276,  275,  274,  273,  271,  270,  256,  252,
      247,  240,  228,  224,  218,  217,  178,  173,  171,  169,
      165,  159,  158,  150,  149,  148,  146,  144,  142,  141,
      140,  139,  138,  137,  136,  134,  133,  132,  130,  126,
      125,  124,  122,  120,  116,  115,  113,  112,  111,  110,

      106,  104,  103,  100,   99,   98,   95,   94,   93,   91,
       88,   87,   86,   83,   78,   76,   74,   73,   72,   70,
       69,   67,   65,   63,   62,   61,   60,   59,   58,   57,
       48,   47,   46,   44,   42,   41,   39,   37,    3,    2,
      440,  440,  440,  440,  440,  440,  440,  440,  440,  440,
      440,  440,  440,  440,  440,  440,  440,  440,  440,  440,
      440,  440,  440,  440,  440,  440,  440,  440,  440,  440,
      440,  440,  440,  440,  440,  440,  440,  440,  440,  440,
      440,  440,  440,  440,  440,  440,  440,  440,  440,  440,
      440,  440,  440,  440,  440,  440,  440,  440,  440,  440,

      440,  440,  440
    } ;

/* Table of booleans, true if rule could match eol. */
static yyconst flex_int32_t yy_rule_can_match_eol[193] =
    {   0,
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0,     };

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

extern int nvgp4ASM__flex_debug;
int nvgp4ASM__flex_debug = 0;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *nvgp4ASM_text;
#line 1 "nvgp4ASM.l"
#line 10 "nvgp4ASM.l"
#include "nvgp4ASM.tab.h"
#include "GPU/instruction_def.h"
#include "GPU/gpu_config.h"

#define COL_NO nvgp4ASM_col+=strlen(nvgp4ASM_text)

unsigned int nvgp4ASM_col = 0;
#line 821 "nvgp4ASM.cpp"

#define INITIAL 0

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals (void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int nvgp4ASM_lex_destroy (void );

int nvgp4ASM_get_debug (void );

void nvgp4ASM_set_debug (int debug_flag  );

YY_EXTRA_TYPE nvgp4ASM_get_extra (void );

void nvgp4ASM_set_extra (YY_EXTRA_TYPE user_defined  );

FILE *nvgp4ASM_get_in (void );

void nvgp4ASM_set_in  (FILE * in_str  );

FILE *nvgp4ASM_get_out (void );

void nvgp4ASM_set_out  (FILE * out_str  );

int nvgp4ASM_get_leng (void );

char *nvgp4ASM_get_text (void );

int nvgp4ASM_get_lineno (void );

void nvgp4ASM_set_lineno (int line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int nvgp4ASM_wrap (void );
#else
extern int nvgp4ASM_wrap (void );
#endif
#endif

    static void yyunput (int c,char *buf_ptr  );
    
#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (void );
#else
static int input (void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( nvgp4ASM_text, nvgp4ASM_leng, 1, nvgp4ASM_out )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( nvgp4ASM_in )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( nvgp4ASM_in ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, nvgp4ASM_in))==0 && ferror(nvgp4ASM_in)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(nvgp4ASM_in); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int nvgp4ASM_lex (void);

#define YY_DECL int nvgp4ASM_lex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after nvgp4ASM_text and nvgp4ASM_leng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	if ( nvgp4ASM_leng > 0 ) \
		YY_CURRENT_BUFFER_LVALUE->yy_at_bol = \
				(nvgp4ASM_text[nvgp4ASM_leng - 1] == '\n'); \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
#line 19 "nvgp4ASM.l"

#line 1013 "nvgp4ASM.cpp"

	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! nvgp4ASM_in )
			nvgp4ASM_in = stdin;

		if ( ! nvgp4ASM_out )
			nvgp4ASM_out = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			nvgp4ASM_ensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				nvgp4ASM__create_buffer(nvgp4ASM_in,YY_BUF_SIZE );
		}

		nvgp4ASM__load_buffer_state( );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of nvgp4ASM_text. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
		yy_current_state += YY_AT_BOL();
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 441 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 641 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER && yy_rule_can_match_eol[yy_act] )
			{
			int yyl;
			for ( yyl = 0; yyl < nvgp4ASM_leng; ++yyl )
				if ( nvgp4ASM_text[yyl] == '\n' )
					   
    nvgp4ASM_lineno++;
;
			}

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
*yy_cp = (yy_hold_char); /* undo effects of setting up nvgp4ASM_text */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up nvgp4ASM_text again */
YY_RULE_SETUP
#line 20 "nvgp4ASM.l"
/* Comment */
	YY_BREAK
case 2:
*yy_cp = (yy_hold_char); /* undo effects of setting up nvgp4ASM_text */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up nvgp4ASM_text again */
YY_RULE_SETUP
#line 21 "nvgp4ASM.l"

	YY_BREAK
case 3:
*yy_cp = (yy_hold_char); /* undo effects of setting up nvgp4ASM_text */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up nvgp4ASM_text again */
YY_RULE_SETUP
#line 22 "nvgp4ASM.l"

	YY_BREAK
case 4:
*yy_cp = (yy_hold_char); /* undo effects of setting up nvgp4ASM_text */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up nvgp4ASM_text again */
YY_RULE_SETUP
#line 23 "nvgp4ASM.l"

	YY_BREAK
case 5:
*yy_cp = (yy_hold_char); /* undo effects of setting up nvgp4ASM_text */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up nvgp4ASM_text again */
YY_RULE_SETUP
#line 24 "nvgp4ASM.l"

	YY_BREAK
case 6:
*yy_cp = (yy_hold_char); /* undo effects of setting up nvgp4ASM_text */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up nvgp4ASM_text again */
YY_RULE_SETUP
#line 25 "nvgp4ASM.l"

	YY_BREAK
case 7:
*yy_cp = (yy_hold_char); /* undo effects of setting up nvgp4ASM_text */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up nvgp4ASM_text again */
YY_RULE_SETUP
#line 26 "nvgp4ASM.l"
/* Comment */
	YY_BREAK
case 8:
*yy_cp = (yy_hold_char); /* undo effects of setting up nvgp4ASM_text */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up nvgp4ASM_text again */
YY_RULE_SETUP
#line 27 "nvgp4ASM.l"

	YY_BREAK
case 9:
*yy_cp = (yy_hold_char); /* undo effects of setting up nvgp4ASM_text */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up nvgp4ASM_text again */
YY_RULE_SETUP
#line 28 "nvgp4ASM.l"

	YY_BREAK
case 10:
*yy_cp = (yy_hold_char); /* undo effects of setting up nvgp4ASM_text */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up nvgp4ASM_text again */
YY_RULE_SETUP
#line 29 "nvgp4ASM.l"

	YY_BREAK
case 11:
*yy_cp = (yy_hold_char); /* undo effects of setting up nvgp4ASM_text */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up nvgp4ASM_text again */
YY_RULE_SETUP
#line 30 "nvgp4ASM.l"

	YY_BREAK
case 12:
YY_RULE_SETUP
#line 32 "nvgp4ASM.l"
COL_NO; return PROF;
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 33 "nvgp4ASM.l"
COL_NO; nvgp4ASM_lval.ival=0; return SHADERTYPE;
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 34 "nvgp4ASM.l"
COL_NO; nvgp4ASM_lval.ival=1; return SHADERTYPE;
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 35 "nvgp4ASM.l"
COL_NO; return END;
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 37 "nvgp4ASM.l"
COL_NO;	return TEXTURE;
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 39 "nvgp4ASM.l"
COL_NO;	nvgp4ASM_lval.ival=OP_ABS; return VECTOROP;
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 40 "nvgp4ASM.l"
COL_NO;	nvgp4ASM_lval.ival=OP_CEIL; return VECTOROP;
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 41 "nvgp4ASM.l"
COL_NO;	nvgp4ASM_lval.ival=OP_FLR; return VECTOROP;
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 42 "nvgp4ASM.l"
COL_NO;	nvgp4ASM_lval.ival=OP_FRC; return VECTOROP;
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 43 "nvgp4ASM.l"
COL_NO;	nvgp4ASM_lval.ival=OP_I2F; return VECTOROP;
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 44 "nvgp4ASM.l"
COL_NO;	nvgp4ASM_lval.ival=OP_LIT; return VECTOROP;
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 45 "nvgp4ASM.l"
COL_NO;	nvgp4ASM_lval.ival=OP_MOV; return VECTOROP;
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 46 "nvgp4ASM.l"
COL_NO;	nvgp4ASM_lval.ival=OP_NOT; return VECTOROP;
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 47 "nvgp4ASM.l"
COL_NO;	nvgp4ASM_lval.ival=OP_NRM; return VECTOROP;
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 48 "nvgp4ASM.l"
COL_NO;	nvgp4ASM_lval.ival=OP_PK2H; return VECTOROP;
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 49 "nvgp4ASM.l"
COL_NO;	nvgp4ASM_lval.ival=OP_PK2US; return VECTOROP;
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 50 "nvgp4ASM.l"
COL_NO;	nvgp4ASM_lval.ival=OP_PK4B; return VECTOROP;
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 51 "nvgp4ASM.l"
COL_NO;	nvgp4ASM_lval.ival=OP_PK4UB; return VECTOROP;
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 52 "nvgp4ASM.l"
COL_NO;	nvgp4ASM_lval.ival=OP_ROUND; return VECTOROP;
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 53 "nvgp4ASM.l"
COL_NO;	nvgp4ASM_lval.ival=OP_SSG; return VECTOROP;
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 54 "nvgp4ASM.l"
COL_NO;	nvgp4ASM_lval.ival=OP_TRUNC; return VECTOROP;
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 55 "nvgp4ASM.l"
COL_NO;	nvgp4ASM_lval.ival=OP_COS; return SCALAROP;
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 56 "nvgp4ASM.l"
COL_NO;	nvgp4ASM_lval.ival=OP_EX2; return SCALAROP;
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 57 "nvgp4ASM.l"
COL_NO;	nvgp4ASM_lval.ival=OP_LG2; return SCALAROP;
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 58 "nvgp4ASM.l"
COL_NO;	nvgp4ASM_lval.ival=OP_RCC; return SCALAROP;
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 59 "nvgp4ASM.l"
COL_NO;	nvgp4ASM_lval.ival=OP_RCP; return SCALAROP;
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 60 "nvgp4ASM.l"
COL_NO;	nvgp4ASM_lval.ival=OP_RSQ; return SCALAROP;
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 61 "nvgp4ASM.l"
COL_NO;	nvgp4ASM_lval.ival=OP_SCS; return SCALAROP;
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 62 "nvgp4ASM.l"
COL_NO;	nvgp4ASM_lval.ival=OP_SIN; return SCALAROP;
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 63 "nvgp4ASM.l"
COL_NO;	nvgp4ASM_lval.ival=OP_UP2H; return SCALAROP;
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 64 "nvgp4ASM.l"
COL_NO;	nvgp4ASM_lval.ival=OP_UP2US; return SCALAROP;
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 65 "nvgp4ASM.l"
COL_NO;	nvgp4ASM_lval.ival=OP_UP4B; return SCALAROP;
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 66 "nvgp4ASM.l"
COL_NO;	nvgp4ASM_lval.ival=OP_UP4UB; return SCALAROP;
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 67 "nvgp4ASM.l"
COL_NO;	nvgp4ASM_lval.ival=OP_POW;  return BINSCOP;
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 68 "nvgp4ASM.l"
COL_NO;	nvgp4ASM_lval.ival=OP_DIV; return VECSCAOP;
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 69 "nvgp4ASM.l"
COL_NO;	nvgp4ASM_lval.ival=OP_SHL; return VECSCAOP;
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 70 "nvgp4ASM.l"
COL_NO;	nvgp4ASM_lval.ival=OP_SHR; return VECSCAOP;
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 71 "nvgp4ASM.l"
COL_NO;	nvgp4ASM_lval.ival=OP_MOD; return VECSCAOP;
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 72 "nvgp4ASM.l"
COL_NO;	nvgp4ASM_lval.ival=OP_ADD; return BINOP;
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 73 "nvgp4ASM.l"
COL_NO;	nvgp4ASM_lval.ival=OP_AND; return BINOP;
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 74 "nvgp4ASM.l"
COL_NO;	nvgp4ASM_lval.ival=OP_DP3; return BINOP;
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 75 "nvgp4ASM.l"
COL_NO;	nvgp4ASM_lval.ival=OP_DP4; return BINOP;
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 76 "nvgp4ASM.l"
COL_NO;	nvgp4ASM_lval.ival=OP_DPH; return BINOP;
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 77 "nvgp4ASM.l"
COL_NO;	nvgp4ASM_lval.ival=OP_DST; return BINOP;
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 78 "nvgp4ASM.l"
COL_NO;	nvgp4ASM_lval.ival=OP_MAX; return BINOP;
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 79 "nvgp4ASM.l"
COL_NO;	nvgp4ASM_lval.ival=OP_MIN; return BINOP;
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 80 "nvgp4ASM.l"
COL_NO;	nvgp4ASM_lval.ival=OP_MUL; return BINOP;
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 81 "nvgp4ASM.l"
COL_NO;	nvgp4ASM_lval.ival=OP_OR; return BINOP;
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 82 "nvgp4ASM.l"
COL_NO;	nvgp4ASM_lval.ival=OP_RFL; return BINOP;
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 83 "nvgp4ASM.l"
COL_NO;	nvgp4ASM_lval.ival=OP_SEQ; return BINOP;
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 84 "nvgp4ASM.l"
COL_NO;	nvgp4ASM_lval.ival=OP_SFL; return BINOP;
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 85 "nvgp4ASM.l"
COL_NO;	nvgp4ASM_lval.ival=OP_SGE; return BINOP;
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 86 "nvgp4ASM.l"
COL_NO;	nvgp4ASM_lval.ival=OP_SGT; return BINOP;
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 87 "nvgp4ASM.l"
COL_NO;	nvgp4ASM_lval.ival=OP_SLE; return BINOP;
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 88 "nvgp4ASM.l"
COL_NO;	nvgp4ASM_lval.ival=OP_SLT; return BINOP;
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 89 "nvgp4ASM.l"
COL_NO;	nvgp4ASM_lval.ival=OP_SNE; return BINOP;
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 90 "nvgp4ASM.l"
COL_NO;	nvgp4ASM_lval.ival=OP_STR; return BINOP;
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 91 "nvgp4ASM.l"
COL_NO;	nvgp4ASM_lval.ival=OP_SUB; return BINOP;
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 92 "nvgp4ASM.l"
COL_NO;	nvgp4ASM_lval.ival=OP_XPD; return BINOP;
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 93 "nvgp4ASM.l"
COL_NO;	nvgp4ASM_lval.ival=OP_DP2; return BINOP;
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 94 "nvgp4ASM.l"
COL_NO;	nvgp4ASM_lval.ival=OP_XOR; return BINOP;
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 95 "nvgp4ASM.l"
COL_NO;	nvgp4ASM_lval.ival=OP_CMP; return TRIOP;
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 96 "nvgp4ASM.l"
COL_NO;	nvgp4ASM_lval.ival=OP_DP2A; return TRIOP;
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 97 "nvgp4ASM.l"
COL_NO;	nvgp4ASM_lval.ival=OP_LRP; return TRIOP;
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 98 "nvgp4ASM.l"
COL_NO;	nvgp4ASM_lval.ival=OP_MAD; return TRIOP;
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 99 "nvgp4ASM.l"
COL_NO;	nvgp4ASM_lval.ival=OP_SAD; return TRIOP;
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 100 "nvgp4ASM.l"
COL_NO;	nvgp4ASM_lval.ival=OP_X2D; return TRIOP;
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 101 "nvgp4ASM.l"
COL_NO;	nvgp4ASM_lval.ival=OP_SWZ; return SWZOP;
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 102 "nvgp4ASM.l"
COL_NO;	nvgp4ASM_lval.ival=OP_TEX; return TEXOP;
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 103 "nvgp4ASM.l"
COL_NO;	nvgp4ASM_lval.ival=OP_TXB; return TEXOP;
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 104 "nvgp4ASM.l"
COL_NO;	nvgp4ASM_lval.ival=OP_TXF; return TEXOP;
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 105 "nvgp4ASM.l"
COL_NO;	nvgp4ASM_lval.ival=OP_TXL; return TEXOP;
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 106 "nvgp4ASM.l"
COL_NO;	nvgp4ASM_lval.ival=OP_TXP; return TEXOP;
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 107 "nvgp4ASM.l"
COL_NO;	nvgp4ASM_lval.ival=OP_TXQ; return TEXOP;
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 108 "nvgp4ASM.l"
COL_NO;	nvgp4ASM_lval.ival=OP_TXD; return TXDOP;
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 109 "nvgp4ASM.l"
COL_NO;	nvgp4ASM_lval.ival=OP_CAL; return BRAOP;
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 110 "nvgp4ASM.l"
COL_NO;	nvgp4ASM_lval.ival=OP_RET; return FLOWCCOP;
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 111 "nvgp4ASM.l"
COL_NO;	nvgp4ASM_lval.ival=OP_BRK; return FLOWCCOP;
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 112 "nvgp4ASM.l"
COL_NO;	nvgp4ASM_lval.ival=OP_CONT; return FLOWCCOP;
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 113 "nvgp4ASM.l"
COL_NO;	nvgp4ASM_lval.ival=OP_IF; return IFOP;
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 114 "nvgp4ASM.l"
COL_NO;	nvgp4ASM_lval.ival=OP_REP; return REPOP;
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 115 "nvgp4ASM.l"
COL_NO;	nvgp4ASM_lval.ival=OP_ELSE; return ENDFLOWOP;
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 116 "nvgp4ASM.l"
COL_NO;	nvgp4ASM_lval.ival=OP_ENDIF; return ENDFLOWOP;
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 117 "nvgp4ASM.l"
COL_NO;	nvgp4ASM_lval.ival=OP_ENDREP; return ENDFLOWOP;
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 118 "nvgp4ASM.l"
COL_NO;	nvgp4ASM_lval.ival=OPM_F; return OPMODIFIER;
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 119 "nvgp4ASM.l"
COL_NO;	nvgp4ASM_lval.ival=OPM_U; return OPMODIFIER;
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 120 "nvgp4ASM.l"
COL_NO;	nvgp4ASM_lval.ival=OPM_S; return OPMODIFIER;
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 121 "nvgp4ASM.l"
COL_NO;	nvgp4ASM_lval.ival=OPM_CC; return OPMODIFIER;
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 122 "nvgp4ASM.l"
COL_NO;	nvgp4ASM_lval.ival=OPM_CC0; return OPMODIFIER;
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 123 "nvgp4ASM.l"
COL_NO;	nvgp4ASM_lval.ival=OPM_CC1; return OPMODIFIER;
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 124 "nvgp4ASM.l"
COL_NO;	nvgp4ASM_lval.ival=OPM_SAT; return OPMODIFIER;
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 125 "nvgp4ASM.l"
COL_NO;	nvgp4ASM_lval.ival=OPM_SSAT; return OPMODIFIER;
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 126 "nvgp4ASM.l"
COL_NO;	nvgp4ASM_lval.ival=OPM_NTC; return OPMODIFIER;
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 127 "nvgp4ASM.l"
COL_NO;	nvgp4ASM_lval.ival=OPM_S24; return OPMODIFIER;
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 128 "nvgp4ASM.l"
COL_NO;	nvgp4ASM_lval.ival=OPM_U24; return OPMODIFIER;
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 129 "nvgp4ASM.l"
COL_NO;	nvgp4ASM_lval.ival=OPM_HI; return OPMODIFIER;
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 130 "nvgp4ASM.l"
COL_NO;	nvgp4ASM_lval.ival=TT_1D; return TEXTARGET;
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 131 "nvgp4ASM.l"
COL_NO;	nvgp4ASM_lval.ival=TT_2D; return TEXTARGET;
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 132 "nvgp4ASM.l"
COL_NO;	nvgp4ASM_lval.ival=TT_3D; return TEXTARGET;
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 133 "nvgp4ASM.l"
COL_NO;	nvgp4ASM_lval.ival=TT_CUBE; return TEXTARGET;
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 134 "nvgp4ASM.l"
COL_NO;	nvgp4ASM_lval.ival=TT_RECT; return TEXTARGET;
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 135 "nvgp4ASM.l"
COL_NO;	nvgp4ASM_lval.ival=TT_SHADOW1D; return TEXTARGET;
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 136 "nvgp4ASM.l"
COL_NO;	nvgp4ASM_lval.ival=TT_SHADOW2D; return TEXTARGET;
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 137 "nvgp4ASM.l"
COL_NO;	nvgp4ASM_lval.ival=TT_SHADOWRECT; return TEXTARGET;
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 138 "nvgp4ASM.l"
COL_NO;	nvgp4ASM_lval.ival=TT_ARRAY1D; return TEXTARGET;
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 139 "nvgp4ASM.l"
COL_NO;	nvgp4ASM_lval.ival=TT_ARRAY2D; return TEXTARGET;
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 140 "nvgp4ASM.l"
COL_NO;	nvgp4ASM_lval.ival=TT_SHADOWCUBE; return TEXTARGET;
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 141 "nvgp4ASM.l"
COL_NO;	nvgp4ASM_lval.ival=TT_SHADOWARRAY1D; return TEXTARGET;
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 142 "nvgp4ASM.l"
COL_NO;	nvgp4ASM_lval.ival=TT_SHADOWARRAY2D; return TEXTARGET;
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 143 "nvgp4ASM.l"
COL_NO;	nvgp4ASM_lval.ival=CC_EQ; return CCMASKRULE;
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 144 "nvgp4ASM.l"
COL_NO;	nvgp4ASM_lval.ival=CC_GE; return CCMASKRULE;
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 145 "nvgp4ASM.l"
COL_NO;	nvgp4ASM_lval.ival=CC_GT; return CCMASKRULE;
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 146 "nvgp4ASM.l"
COL_NO;	nvgp4ASM_lval.ival=CC_LE; return CCMASKRULE;
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 147 "nvgp4ASM.l"
COL_NO;	nvgp4ASM_lval.ival=CC_LT; return CCMASKRULE;
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 148 "nvgp4ASM.l"
COL_NO;	nvgp4ASM_lval.ival=CC_NE; return CCMASKRULE;
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 149 "nvgp4ASM.l"
COL_NO;	nvgp4ASM_lval.ival=CC_TR; return CCMASKRULE;
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 150 "nvgp4ASM.l"
COL_NO;	nvgp4ASM_lval.ival=CC_FL; return CCMASKRULE;
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 151 "nvgp4ASM.l"
COL_NO;	nvgp4ASM_lval.ival=CC_EQ0; return CCMASKRULE;
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 152 "nvgp4ASM.l"
COL_NO;	nvgp4ASM_lval.ival=CC_GE0; return CCMASKRULE;
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 153 "nvgp4ASM.l"
COL_NO;	nvgp4ASM_lval.ival=CC_GT0; return CCMASKRULE;
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 154 "nvgp4ASM.l"
COL_NO;	nvgp4ASM_lval.ival=CC_LE0; return CCMASKRULE;
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 155 "nvgp4ASM.l"
COL_NO;	nvgp4ASM_lval.ival=CC_LT0; return CCMASKRULE;
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 156 "nvgp4ASM.l"
COL_NO;	nvgp4ASM_lval.ival=CC_NE0; return CCMASKRULE;
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 157 "nvgp4ASM.l"
COL_NO;	nvgp4ASM_lval.ival=CC_TR0; return CCMASKRULE;
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 158 "nvgp4ASM.l"
COL_NO;	nvgp4ASM_lval.ival=CC_FL0; return CCMASKRULE;
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 159 "nvgp4ASM.l"
COL_NO;	nvgp4ASM_lval.ival=CC_EQ1; return CCMASKRULE;
	YY_BREAK
case 138:
YY_RULE_SETUP
#line 160 "nvgp4ASM.l"
COL_NO;	nvgp4ASM_lval.ival=CC_GE1; return CCMASKRULE;
	YY_BREAK
case 139:
YY_RULE_SETUP
#line 161 "nvgp4ASM.l"
COL_NO;	nvgp4ASM_lval.ival=CC_GT1; return CCMASKRULE;
	YY_BREAK
case 140:
YY_RULE_SETUP
#line 162 "nvgp4ASM.l"
COL_NO;	nvgp4ASM_lval.ival=CC_LE1; return CCMASKRULE;
	YY_BREAK
case 141:
YY_RULE_SETUP
#line 163 "nvgp4ASM.l"
COL_NO;	nvgp4ASM_lval.ival=CC_LT1; return CCMASKRULE;
	YY_BREAK
case 142:
YY_RULE_SETUP
#line 164 "nvgp4ASM.l"
COL_NO;	nvgp4ASM_lval.ival=CC_NE1; return CCMASKRULE;
	YY_BREAK
case 143:
YY_RULE_SETUP
#line 165 "nvgp4ASM.l"
COL_NO;	nvgp4ASM_lval.ival=CC_TR1; return CCMASKRULE;
	YY_BREAK
case 144:
YY_RULE_SETUP
#line 166 "nvgp4ASM.l"
COL_NO;	nvgp4ASM_lval.ival=CC_FL1; return CCMASKRULE;
	YY_BREAK
case 145:
YY_RULE_SETUP
#line 167 "nvgp4ASM.l"
COL_NO;	nvgp4ASM_lval.ival=CC_NAN; return CCMASKRULE;
	YY_BREAK
case 146:
YY_RULE_SETUP
#line 168 "nvgp4ASM.l"
COL_NO;	nvgp4ASM_lval.ival=CC_NAN0; return CCMASKRULE;
	YY_BREAK
case 147:
YY_RULE_SETUP
#line 169 "nvgp4ASM.l"
COL_NO;	nvgp4ASM_lval.ival=CC_NAN1; return CCMASKRULE;
	YY_BREAK
case 148:
YY_RULE_SETUP
#line 170 "nvgp4ASM.l"
COL_NO;	nvgp4ASM_lval.ival=CC_LEG; return CCMASKRULE;
	YY_BREAK
case 149:
YY_RULE_SETUP
#line 171 "nvgp4ASM.l"
COL_NO;	nvgp4ASM_lval.ival=CC_LEG0; return CCMASKRULE;
	YY_BREAK
case 150:
YY_RULE_SETUP
#line 172 "nvgp4ASM.l"
COL_NO;	nvgp4ASM_lval.ival=CC_LEG1; return CCMASKRULE;
	YY_BREAK
case 151:
YY_RULE_SETUP
#line 173 "nvgp4ASM.l"
COL_NO;	nvgp4ASM_lval.ival=CC_CF; return CCMASKRULE;
	YY_BREAK
case 152:
YY_RULE_SETUP
#line 174 "nvgp4ASM.l"
COL_NO;	nvgp4ASM_lval.ival=CC_CF0; return CCMASKRULE;
	YY_BREAK
case 153:
YY_RULE_SETUP
#line 175 "nvgp4ASM.l"
COL_NO;	nvgp4ASM_lval.ival=CC_CF1; return CCMASKRULE;
	YY_BREAK
case 154:
YY_RULE_SETUP
#line 176 "nvgp4ASM.l"
COL_NO;	nvgp4ASM_lval.ival=CC_NCF; return CCMASKRULE;
	YY_BREAK
case 155:
YY_RULE_SETUP
#line 177 "nvgp4ASM.l"
COL_NO;	nvgp4ASM_lval.ival=CC_NCF0; return CCMASKRULE;
	YY_BREAK
case 156:
YY_RULE_SETUP
#line 178 "nvgp4ASM.l"
COL_NO;	nvgp4ASM_lval.ival=CC_NCF1; return CCMASKRULE;
	YY_BREAK
case 157:
YY_RULE_SETUP
#line 179 "nvgp4ASM.l"
COL_NO;	nvgp4ASM_lval.ival=CC_OF; return CCMASKRULE;
	YY_BREAK
case 158:
YY_RULE_SETUP
#line 180 "nvgp4ASM.l"
COL_NO;	nvgp4ASM_lval.ival=CC_OF0; return CCMASKRULE;
	YY_BREAK
case 159:
YY_RULE_SETUP
#line 181 "nvgp4ASM.l"
COL_NO;	nvgp4ASM_lval.ival=CC_OF1; return CCMASKRULE;
	YY_BREAK
case 160:
YY_RULE_SETUP
#line 182 "nvgp4ASM.l"
COL_NO;	nvgp4ASM_lval.ival=CC_NOF; return CCMASKRULE;
	YY_BREAK
case 161:
YY_RULE_SETUP
#line 183 "nvgp4ASM.l"
COL_NO;	nvgp4ASM_lval.ival=CC_NOF0; return CCMASKRULE;
	YY_BREAK
case 162:
YY_RULE_SETUP
#line 184 "nvgp4ASM.l"
COL_NO;	nvgp4ASM_lval.ival=CC_NOF1; return CCMASKRULE;
	YY_BREAK
case 163:
YY_RULE_SETUP
#line 185 "nvgp4ASM.l"
COL_NO;	nvgp4ASM_lval.ival=CC_AB; return CCMASKRULE;
	YY_BREAK
case 164:
YY_RULE_SETUP
#line 186 "nvgp4ASM.l"
COL_NO;	nvgp4ASM_lval.ival=CC_AB0; return CCMASKRULE;
	YY_BREAK
case 165:
YY_RULE_SETUP
#line 187 "nvgp4ASM.l"
COL_NO;	nvgp4ASM_lval.ival=CC_AB1; return CCMASKRULE;
	YY_BREAK
case 166:
YY_RULE_SETUP
#line 188 "nvgp4ASM.l"
COL_NO;	nvgp4ASM_lval.ival=CC_BLE; return CCMASKRULE;
	YY_BREAK
case 167:
YY_RULE_SETUP
#line 189 "nvgp4ASM.l"
COL_NO;	nvgp4ASM_lval.ival=CC_BLE0; return CCMASKRULE;
	YY_BREAK
case 168:
YY_RULE_SETUP
#line 190 "nvgp4ASM.l"
COL_NO;	nvgp4ASM_lval.ival=CC_BLE1; return CCMASKRULE;
	YY_BREAK
case 169:
YY_RULE_SETUP
#line 191 "nvgp4ASM.l"
COL_NO;	nvgp4ASM_lval.ival=CC_SF; return CCMASKRULE;
	YY_BREAK
case 170:
YY_RULE_SETUP
#line 192 "nvgp4ASM.l"
COL_NO;	nvgp4ASM_lval.ival=CC_SF0; return CCMASKRULE;
	YY_BREAK
case 171:
YY_RULE_SETUP
#line 193 "nvgp4ASM.l"
COL_NO;	nvgp4ASM_lval.ival=CC_SF1; return CCMASKRULE;
	YY_BREAK
case 172:
YY_RULE_SETUP
#line 194 "nvgp4ASM.l"
COL_NO;	nvgp4ASM_lval.ival=CC_NSF; return CCMASKRULE;
	YY_BREAK
case 173:
YY_RULE_SETUP
#line 195 "nvgp4ASM.l"
COL_NO;	nvgp4ASM_lval.ival=CC_NSF0; return CCMASKRULE;
	YY_BREAK
case 174:
YY_RULE_SETUP
#line 196 "nvgp4ASM.l"
COL_NO;	nvgp4ASM_lval.ival=CC_NSF1; return CCMASKRULE;
	YY_BREAK
case 175:
YY_RULE_SETUP
#line 197 "nvgp4ASM.l"
COL_NO; return VERTEX;
	YY_BREAK
case 176:
YY_RULE_SETUP
#line 198 "nvgp4ASM.l"
COL_NO; return FRAGMENT;
	YY_BREAK
case 177:
YY_RULE_SETUP
#line 199 "nvgp4ASM.l"
COL_NO; return RESULT;
	YY_BREAK
case 178:
YY_RULE_SETUP
#line 200 "nvgp4ASM.l"
COL_NO; return ATTRIB;
	YY_BREAK
case 179:
YY_RULE_SETUP
#line 201 "nvgp4ASM.l"
COL_NO; return POSITION;
	YY_BREAK
case 180:
YY_RULE_SETUP
#line 202 "nvgp4ASM.l"
COL_NO; return RESULT_COLOR0;
	YY_BREAK
case 181:
YY_RULE_SETUP
#line 203 "nvgp4ASM.l"
COL_NO;	return *nvgp4ASM_text;
	YY_BREAK
case 182:
YY_RULE_SETUP
#line 204 "nvgp4ASM.l"
COL_NO; nvgp4ASM_lval.ival=-1; return REG;
	YY_BREAK
case 183:
YY_RULE_SETUP
#line 206 "nvgp4ASM.l"
{ COL_NO;
		char *temp = nvgp4ASM_text+1;
		nvgp4ASM_lval.ival=atoi(temp);
		return REG;
	}
	YY_BREAK
case 184:
YY_RULE_SETUP
#line 211 "nvgp4ASM.l"
{ COL_NO;
		strcpy(nvgp4ASM_lval.sval,nvgp4ASM_text);
		return XYZW_SWIZZLE;
	}
	YY_BREAK
case 185:
YY_RULE_SETUP
#line 215 "nvgp4ASM.l"
{ COL_NO;
		strcpy(nvgp4ASM_lval.sval,nvgp4ASM_text);
		return RGBA_SWIZZLE;
	}
	YY_BREAK
case 186:
YY_RULE_SETUP
#line 219 "nvgp4ASM.l"
{ COL_NO;
		strcpy(nvgp4ASM_lval.sval,nvgp4ASM_text);
		return IDENTIFIER;
	}
	YY_BREAK
case 187:
YY_RULE_SETUP
#line 223 "nvgp4ASM.l"
{ COL_NO;
		nvgp4ASM_lval.ival = atoi(nvgp4ASM_text);
		return INTEGER;
	}
	YY_BREAK
case 188:
YY_RULE_SETUP
#line 227 "nvgp4ASM.l"
{ COL_NO;
		nvgp4ASM_lval.fval = atof(nvgp4ASM_text);
		return FLOAT;
	}
	YY_BREAK
case 189:
YY_RULE_SETUP
#line 231 "nvgp4ASM.l"
COL_NO; return *nvgp4ASM_text;
	YY_BREAK
case 190:
YY_RULE_SETUP
#line 233 "nvgp4ASM.l"
COL_NO;		/* remove all space-related char */
	YY_BREAK
case 191:
/* rule 191 can match eol */
YY_RULE_SETUP
#line 234 "nvgp4ASM.l"
nvgp4ASM_col = 0;
	YY_BREAK
case 192:
YY_RULE_SETUP
#line 235 "nvgp4ASM.l"
ECHO;
	YY_BREAK
#line 2120 "nvgp4ASM.cpp"
case YY_STATE_EOF(INITIAL):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed nvgp4ASM_in at a new source and called
			 * nvgp4ASM_lex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = nvgp4ASM_in;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( nvgp4ASM_wrap( ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * nvgp4ASM_text, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of nvgp4ASM_lex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					nvgp4ASM_realloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), (size_t) num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			nvgp4ASM_restart(nvgp4ASM_in  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) nvgp4ASM_realloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
	yy_current_state = (yy_start);
	yy_current_state += YY_AT_BOL();

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 441 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	register int yy_is_jam;
    	register char *yy_cp = (yy_c_buf_p);

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 441 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 440);

	return yy_is_jam ? 0 : yy_current_state;
}

    static void yyunput (int c, register char * yy_bp )
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up nvgp4ASM_text */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

    if ( c == '\n' ){
        --nvgp4ASM_lineno;
    }

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					nvgp4ASM_restart(nvgp4ASM_in );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( nvgp4ASM_wrap( ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve nvgp4ASM_text */
	(yy_hold_char) = *++(yy_c_buf_p);

	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = (c == '\n');
	if ( YY_CURRENT_BUFFER_LVALUE->yy_at_bol )
		   
    nvgp4ASM_lineno++;
;

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void nvgp4ASM_restart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        nvgp4ASM_ensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            nvgp4ASM__create_buffer(nvgp4ASM_in,YY_BUF_SIZE );
	}

	nvgp4ASM__init_buffer(YY_CURRENT_BUFFER,input_file );
	nvgp4ASM__load_buffer_state( );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void nvgp4ASM__switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		nvgp4ASM_pop_buffer_state();
	 *		nvgp4ASM_push_buffer_state(new_buffer);
     */
	nvgp4ASM_ensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	nvgp4ASM__load_buffer_state( );

	/* We don't actually know whether we did this switch during
	 * EOF (nvgp4ASM_wrap()) processing, but the only time this flag
	 * is looked at is after nvgp4ASM_wrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void nvgp4ASM__load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	nvgp4ASM_in = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE nvgp4ASM__create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) nvgp4ASM_alloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in nvgp4ASM__create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) nvgp4ASM_alloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in nvgp4ASM__create_buffer()" );

	b->yy_is_our_buffer = 1;

	nvgp4ASM__init_buffer(b,file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with nvgp4ASM__create_buffer()
 * 
 */
    void nvgp4ASM__delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		nvgp4ASM_free((void *) b->yy_ch_buf  );

	nvgp4ASM_free((void *) b  );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a nvgp4ASM_restart() or at EOF.
 */
    static void nvgp4ASM__init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	nvgp4ASM__flush_buffer(b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then nvgp4ASM__init_buffer was _probably_
     * called from nvgp4ASM_restart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

	b->yy_is_interactive = 1;

	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void nvgp4ASM__flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		nvgp4ASM__load_buffer_state( );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void nvgp4ASM_push_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	nvgp4ASM_ensure_buffer_stack();

	/* This block is copied from nvgp4ASM__switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from nvgp4ASM__switch_to_buffer. */
	nvgp4ASM__load_buffer_state( );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void nvgp4ASM_pop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	nvgp4ASM__delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		nvgp4ASM__load_buffer_state( );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void nvgp4ASM_ensure_buffer_stack (void)
{
	int num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)nvgp4ASM_alloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in nvgp4ASM_ensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)nvgp4ASM_realloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in nvgp4ASM_ensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE nvgp4ASM__scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) nvgp4ASM_alloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in nvgp4ASM__scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	nvgp4ASM__switch_to_buffer(b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to nvgp4ASM_lex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       nvgp4ASM__scan_bytes() instead.
 */
YY_BUFFER_STATE nvgp4ASM__scan_string (yyconst char * yystr )
{
    
	return nvgp4ASM__scan_bytes(yystr,strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to nvgp4ASM_lex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE nvgp4ASM__scan_bytes  (yyconst char * yybytes, int  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) nvgp4ASM_alloc(n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in nvgp4ASM__scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = nvgp4ASM__scan_buffer(buf,n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in nvgp4ASM__scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg )
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up nvgp4ASM_text. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		nvgp4ASM_text[nvgp4ASM_leng] = (yy_hold_char); \
		(yy_c_buf_p) = nvgp4ASM_text + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		nvgp4ASM_leng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int nvgp4ASM_get_lineno  (void)
{
        
    return nvgp4ASM_lineno;
}

/** Get the input stream.
 * 
 */
FILE *nvgp4ASM_get_in  (void)
{
        return nvgp4ASM_in;
}

/** Get the output stream.
 * 
 */
FILE *nvgp4ASM_get_out  (void)
{
        return nvgp4ASM_out;
}

/** Get the length of the current token.
 * 
 */
int nvgp4ASM_get_leng  (void)
{
        return nvgp4ASM_leng;
}

/** Get the current token.
 * 
 */

char *nvgp4ASM_get_text  (void)
{
        return nvgp4ASM_text;
}

/** Set the current line number.
 * @param line_number
 * 
 */
void nvgp4ASM_set_lineno (int  line_number )
{
    
    nvgp4ASM_lineno = line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * 
 * @see nvgp4ASM__switch_to_buffer
 */
void nvgp4ASM_set_in (FILE *  in_str )
{
        nvgp4ASM_in = in_str ;
}

void nvgp4ASM_set_out (FILE *  out_str )
{
        nvgp4ASM_out = out_str ;
}

int nvgp4ASM_get_debug  (void)
{
        return nvgp4ASM__flex_debug;
}

void nvgp4ASM_set_debug (int  bdebug )
{
        nvgp4ASM__flex_debug = bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from nvgp4ASM_lex_destroy(), so don't allocate here.
     */

    /* We do not touch nvgp4ASM_lineno unless the option is enabled. */
    nvgp4ASM_lineno =  1;
    
    (yy_buffer_stack) = 0;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = (char *) 0;
    (yy_init) = 0;
    (yy_start) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    nvgp4ASM_in = stdin;
    nvgp4ASM_out = stdout;
#else
    nvgp4ASM_in = (FILE *) 0;
    nvgp4ASM_out = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * nvgp4ASM_lex_init()
     */
    return 0;
}

/* nvgp4ASM_lex_destroy is for both reentrant and non-reentrant scanners. */
int nvgp4ASM_lex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		nvgp4ASM__delete_buffer(YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		nvgp4ASM_pop_buffer_state();
	}

	/* Destroy the stack itself. */
	nvgp4ASM_free((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * nvgp4ASM_lex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *nvgp4ASM_alloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *nvgp4ASM_realloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void nvgp4ASM_free (void * ptr )
{
	free( (char *) ptr );	/* see nvgp4ASM_realloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 235 "nvgp4ASM.l"



void nvgp4ASM_error(char *s)
{
    printf("(%d,%d) %s at %s\n",
			nvgp4ASM_lineno,
			nvgp4ASM_col,
			s,
			nvgp4ASM_text);
}

void nvgp4ASM_str_in(const char *s)
{
	nvgp4ASM__scan_string(s);
}


